#include <ros/ros.h>
#include <vector>
double center_offsetx = 0;
double center_offsety = 0;

std::vector<std::vector<double> > setpointsx(0, std::vector<double>(0,18));
std::vector<std::vector<double> > setpointsy(0, std::vector<double>(0,18));




int main(int argc, char** argv){
    ros::Publisher velocity[4];
    ros::Subscriber ;
    setpointsx.push_back({-0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.381, -0.6850, -0.8382, -0.9906, -1.143, -1.2954, -1.4478, -1.4478, -1.4478});
    setpointsx.push_back({-0.0762, -0.0762, -0.0762, -0.0762, -0.0762, -0.0762, -0.0762, -0.0762, -0.0762, -0.0762, -0.2286, -0.381, -0.6850, -0.8382, -0.9906, -1.143, -1.2954, -1.4478});
    setpointsx.push_back({0.0762, 0.0762, 0.0762, 0.0762, 0.0762, 0.0762, 0.0762, 0.0762, 0.0762, 0.0762, 0.2286, 0.381, 0.6850, 0.8382, 0.9906, 1.143, 1.2954, 1.4478});
    setpointsx.push_back({0.2286, 0.2286, 0.2286, 0.2286, 0.2286, 0.2286, 0.2286, 0.2286, 0.2286, 0.381, 0.6850, 0.8382, 0.9906, 1.143, 1.2954, 1.4478, 1.4478, 1.4478});
    
    setpointsy.push_back({0.9906, 0.8382, 0.685, 0.5334, 0.381, 0.2286, 0.0762, -0.0762, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286 });
    setpointsy.push_back({0.9906, 0.8382, 0.685, 0.5334, 0.381, 0.2286, 0.0762, -0.0762, -0.2286, -0.381, -0.381, -0.381, -0.381, -0.381, -0.381, -0.381, -0.381, -0.381 });
    setpointsy.push_back({0.9906, 0.8382, 0.685, 0.5334, 0.381, 0.2286, 0.0762, -0.0762, -0.2286, -0.381, -0.381, -0.381, -0.381, -0.381, -0.381, -0.381, -0.381, -0.381 });
    setpointsy.push_back({0.9906, 0.8382, 0.685, 0.5334, 0.381, 0.2286, 0.0762, -0.0762, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286, -0.2286 });
    
    int phase=0;
    ros::Rate r(10);
    for(int i=0;i<4;i++){
        int pose_ind=0;
        while(phase<4){
            if(phase==0){
                if(pose_ind>18)phase++;
                pose[i];
                velx = ;
            } else if (phase==1){
                // servo command
                // wait
                //
            } else {
                
            }
            r.sleep();
        }
        phase = 0;
        
    }
}